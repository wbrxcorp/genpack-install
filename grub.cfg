serial --speed=115200
terminal_input serial console
terminal_output serial console

if regexp '\/' "$cmdpath"; then
        regexp --set=BOOT_PARTITION '^\(([^)]+)\)' "$cmdpath"
else
        set BOOT_PARTITION=$root
fi

probe -u $BOOT_PARTITION --set=BOOT_PARTITION_UUID

if [ -f "($BOOT_PARTITION)/system.img" ]; then
        set SYSTEM_IMG=($BOOT_PARTITION)/system.img
else
        echo "Looking for data-$BOOT_PARTITION_UUID..."
        if ! search --label --set=DATA_PARTITION data-$BOOT_PARTITION_UUID; then
                echo "Looking for d-$BOOT_PARTITION_UUID..."
                if ! search --label --set=DATA_PARTITION d-$BOOT_PARTITION_UUID; then
                        echo "No properly configured data partition for $BOOT_PARTITION_UUID found."
                        regexp --set=1:BOOT_PARTITION_PREFIX '(.*[^0-9]|^)(1)$' "$BOOT_PARTITION"
                        if [ -n "${BOOT_PARTITION_PREFIX}" ]; then
                                set DATA_PARTITION="${BOOT_PARTITION_PREFIX}2"
                                echo "Trying last resort: $DATA_PARTITION"
                        else
                                sleep --verbose 5
                                reboot
                        fi
                fi
        fi
        echo "Looking for system image file in $DATA_PARTITION..."
        if [ -f ($DATA_PARTITION)/system ]; then
                set SYSTEM_IMG=($DATA_PARTITION)/system
        fi
fi

if [ -z "$SYSTEM_IMG" ]; then
        echo "No system image found."
        sleep --verbose 5
        reboot
fi

loopback loop $SYSTEM_IMG

if [ ! -d (loop)/ ]; then
        echo "Invalid system image."
        sleep --verbose 5
        reboot
fi

set root=loop

# switch to system image's grub.cfg if present
if [ -f /boot/grub/grub.cfg ]; then
        export BOOT_PARTITION BOOT_PARTITION_UUID
        configfile /boot/grub/grub.cfg
        reboot
fi

#else continue with this grub.cfg
if [ -f "($BOOT_PARTITION)/boottime.txt" ]; then
  set timeout=10
else
  set timeout=1
fi

set NET_IFNAMES=0

if [ -f "($BOOT_PARTITION)/system.cfg" ]; then
        source ($BOOT_PARTITION)/system.cfg
fi

set LINUX_ARGS="net.ifnames=$NET_IFNAMES console=ttyS0,115200n8r console=tty0 systemd.firstboot=0 $ARGS"

menuentry "Normal mode" --id normal {
  echo 'Loading kernel...'
  linux /boot/kernel root=systemimg:$BOOT_PARTITION_UUID $LINUX_ARGS
  echo 'Loading initramfs...'
  initrd /boot/initramfs
}

menuentry "Transient mode" --id transient {
  echo 'Loading kernel...'
  linux /boot/kernel root=systemimg:$BOOT_PARTITION_UUID genpack.transient=1 $LINUX_ARGS
  echo 'Loading initramfs...'
  initrd /boot/initramfs
}

if [ "${grub_platform}" = "efi" -a -f "/boot/memtest86-bin.efi" ]; then
  menuentry 'MemTest86 (EFI)' {
    chainloader /boot/memtest86-bin.efi
  }
fi

if [ "${grub_platform}" = "pc" -a -f "/boot/memtest86plus/memtest" ]; then
  menuentry 'MemTest86 (BIOS)' {
    linux16 /boot/memtest86plus/memtest
  }
fi
